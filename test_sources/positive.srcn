// ====== Class declarations ====== //
class BASE {
    private float foo;
};

class POLYNOMIAL inherits BASE {
	public func evaluate(float x) : float;
};

class LINEAR inherits POLYNOMIAL {
	private float a;
	private float b;
    private float foo;
	
	public func build(float A, float B) : LINEAR;
	public func evaluate(float x) : float;
};

class QUADRATIC inherits POLYNOMIAL {
	private float a;
	private float b;
	private float c;
	
    public func build() : QUADRATIC;
	public func build(float A, float B, float C) : QUADRATIC;
	public func evaluate(float x) : float;
};

// ====== Function Definitions ====== //
func POLYNOMIAL::evaluate(float x) : float
{
  return (0);
}

func LINEAR::evaluate(float x) : float 
{
  var
  {
    float result;
  }
  result = 0.0;
  result = a * x + b;
  return (result);
}
  
func QUADRATIC::evaluate(float x) : float
{
  var    
  {
    float result;
  }
  //Using Horner's method
  result = a;
  result = result * x + b;
  result = result * x + c;
  return (result);
}
  
func LINEAR::build(float A, float B) : LINEAR 
{
  var 
  {
    LINEAR new_function;
  }
  new_function.a = A;
  new_function.b = B;
  return (new_function);
}

func QUADRATIC::build() : QUADRATIC
{
  var
  {
    QUADRATIC new_function;
  }
  new_function.a = 1.0;
  new_function.b = 1.0;
  new_function.c = 1.0;
  return (new_function);
}
  
func QUADRATIC::build(float A, float B, float C) : QUADRATIC
{
  var
  {
    QUADRATIC new_function;
  }
  // new_function.a = A;
  // new_function.b = B;
  // new_function.c = C;
  return (new_function);
}

func printArray(integer arr[], integer size) : void 
{
  var
  {
    integer n;
    integer i; 
  }
  n = size;
  i = 0; 
  while (i<n) { 
    write(arr[i]);
      i = i+1;
  };
}

func printArray(integer element) : void 
{
  var
  {
  }
} 
  

// ====== main ====== //
main
{
  var
  {
  }
}