// Assignment 4 coverage:
//      -------------
//      | YES | NO  |
//      ------------- 
// 1.1: |  X  |     |
// 1.2: |     |  X  |
// 1.3: |     |  X  |
// 1.4: |     |  X  |
// 2.1: |  X  |     |
// 2.2: |  X  |     |
// 2.3: |  X  |     |
// 2.4: |     |  X  |
// 3.1: |  X  |     |
// 3.2: |  X  |     |
// 3.3: |  X  |     |
// 3.4: |  ~  |     |
// 4.1: |  X  |     |
// 4.2: |     |  X  |
// 4.3: |     |  X  |
// 4.4: |     |  X  |
// 5.1: |  ~  |     |
// 5.2: |     |  x  |
// 5.3: |     |  X  |
//      -------------


func foo(integer a, integer b, integer c) : integer {
    var {
        integer i;
    }
    i = a + b * c;
    //write (foo(1));
    return (i);
}

func foo(integer a) : integer {
  var {}
  return (0);
}

// Get the nth fibonacci number
func fibonacci(integer n) : void {
  var {
    integer previous;
    integer next;
    integer count;
    integer result;
    integer temp;
  }

  previous = 1;
  next = 1;

  if (n >= 0) then {
    write (1);
    n = n - 1;
  } else ;
  
  if (n >= 1) then {
    write (1);
    n = n - 1;
  } else ;
    
  while (count < n) {
    temp = next;
    next = previous + next;
    previous = temp;
    write (next);
    count = count + 1;
  };
}

main
{
  var
  {
    integer i;   // 1.1
    integer j;   // 1.1
    float k;     // 1.1
    integer t;
  }
  i = 5;
  j = 3;
  fibonacci(1);
  fibonacci(i);
  t = foo(1, 2, j);
  write (t);
  write (foo(1, 2, j));
  write (foo((j + i) * i));

  if (foo(1, 2, j) < foo(j, 2, j)) then {
    write (22);
  } else ;
}