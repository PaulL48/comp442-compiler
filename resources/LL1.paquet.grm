<START> ::= <Prog>
<Prog> ::= <ClassDecl> <FuncDef> 'main' <FuncBody>

<AParams> ::= <Expr> <AParamsTail>
<AParams> ::= EPSILON

<AParamsTail> ::= ',' <Expr> <AParamsTail>
<AParamsTail> ::= EPSILON

<AddOp> ::= '+'
<AddOp> ::= '-'
<AddOp> ::= 'or'

<ArithExpr> ::= <Term> <ArithExprTail>

<ArithExprTail> ::= <AddOp> <Term> <ArithExprTail>
<ArithExprTail> ::= EPSILON

<ArraySizeRept> ::= '[' <IntNum> ']' <ArraySizeRept>
<ArraySizeRept> ::= EPSILON

<AssignOp> ::= 'assign'

<AssignStatTail> ::= <AssignOp> <Expr>

<ClassDecl> ::= 'class' 'id' @makenode~string@ <Inherit> '{' <ClassDeclBody> '}' ';' <ClassDecl>
<ClassDecl> ::= EPSILON

<ClassDeclBody> ::= <Visibility> <MemberDecl> <ClassDeclBody>
<ClassDeclBody> ::= EPSILON

<ClassMethod> ::= 'sr' 'id' @makenode~string@
<ClassMethod> ::= EPSILON

<Expr> ::= <ArithExpr> <ExprTail>

<ExprTail> ::= <RelOp> <ArithExpr>
<ExprTail> ::= EPSILON

<FParams> ::= <Type> 'id' @makenode~string@ <ArraySizeRept> @makefamily~2@ @makesibling@ <FParamsTail>
<FParams> ::= EPSILON

<FParamsTail> ::= ',' <Type> 'id' @makenode~string@ <ArraySizeRept> @makefamily~2@ @makesibling@ <FParamsTail>
<FParamsTail> ::= EPSILON

<Factor> ::= <FuncOrVar>
<Factor> ::= 'intnum'
<Factor> ::= 'floatnum'
<Factor> ::= 'stringlit'
<Factor> ::= '(' <Expr> ')'
<Factor> ::= 'not' <Factor>
<Factor> ::= <Sign> <Factor>
<Factor> ::= 'qm' '[' <Expr> ':' <Expr> ':' <Expr> ']'

<FuncBody> ::= '{' <MethodBodyVar> <StatementList> '}'

<FuncDecl> ::= 'func' 'id' @makenode~string@ '(' @makenode~list@ <FParams> @rename@ ')' ':' <FuncDeclTail> ';'

<FuncDeclTail> ::= <Type>
<FuncDeclTail> ::= 'void'

<FuncDef> ::= <Function> <FuncDef>
<FuncDef> ::= EPSILON

<FuncHead> ::= 'func' 'id' @makenode~string@ <ClassMethod> '(' @makenode~list@ <FParams> @rename@ ')' ':' <FuncDeclTail>

<FuncOrAssignStat> ::= 'id' @makenode~string@ <FuncOrAssignStatIdnest>

<FuncOrAssignStatIdnest> ::= <IndiceRep> <FuncOrAssignStatIdnestVarTail>
<FuncOrAssignStatIdnest> ::= '(' <AParams> ')' <FuncOrAssignStatIdnestFuncTail>

<FuncOrAssignStatIdnestFuncTail> ::= '.' 'id' @makenode~string@ <FuncStatTail>
<FuncOrAssignStatIdnestFuncTail> ::= EPSILON

<FuncStatTail> ::= <IndiceRep> '.' 'id' @makenode~string@ <FuncStatTail>
<FuncStatTail> ::= '(' <AParams> ')' <FuncStatTailIdnest>

<FuncStatTailIdnest> ::= '.' 'id' @makenode~string@ <FuncStatTail>
<FuncStatTailIdnest> ::= EPSILON

<FuncOrAssignStatIdnestVarTail> ::= '.' 'id' @makenode~string@ <FuncOrAssignStatIdnest>
<FuncOrAssignStatIdnestVarTail> ::= <AssignStatTail>

<FuncOrVar> ::= 'id' @makenode~string@ <FuncOrVarIdnest>

<FuncOrVarIdnest> ::= <IndiceRep> <FuncOrVarIdnestTail>
<FuncOrVarIdnest> ::= '(' <AParams> ')' <FuncOrVarIdnestTail>

<FuncOrVarIdnestTail> ::= '.' 'id' @makenode~string@ <FuncOrVarIdnest>
<FuncOrVarIdnestTail> ::= EPSILON

<Function> ::= <FuncHead> <FuncBody>

<IndiceRep> ::= '[' <Expr> ']' <IndiceRep>
<IndiceRep> ::= EPSILON

<Inherit> ::= 'inherits' 'id' @makenode~string@ <NestedId>
<Inherit> ::= EPSILON

<IntNum> ::= 'intnum'
<IntNum> ::= EPSILON

<MemberDecl> ::= <FuncDecl>
<MemberDecl> ::= <VarDecl>

<MethodBodyVar> ::= 'var' '{' <VarDeclRep> '}'
<MethodBodyVar> ::= EPSILON

<MultOp> ::= '*'
<MultOp> ::= '/'
<MultOp> ::= 'and'

<NestedId> ::= ',' 'id' @makenode~string@ <NestedId>
<NestedId> ::= EPSILON


<RelOp> ::= 'eq'
<RelOp> ::= 'neq'
<RelOp> ::= 'lt'
<RelOp> ::= 'gt'
<RelOp> ::= 'leq'
<RelOp> ::= 'geq'


<Sign> ::= '+'
<Sign> ::= '-'

<StatBlock> ::= '{' <StatementList> '}'
<StatBlock> ::= <Statement>
<StatBlock> ::= EPSILON

<Statement> ::= <FuncOrAssignStat> ';'
<Statement> ::= 'if' '(' <Expr> ')' 'then' <StatBlock> 'else' <StatBlock> ';'
<Statement> ::= 'while' '(' <Expr> ')' <StatBlock> ';'
<Statement> ::= 'read' '(' <Variable> ')' ';'
<Statement> ::= 'write' '(' <Expr> ')' ';'
<Statement> ::= 'return' '(' <Expr> ')' ';'
<Statement> ::= 'break' ';'
<Statement> ::= 'continue' ';'

<StatementList> ::= <Statement> <StatementList>
<StatementList> ::= EPSILON

<Term> ::= <Factor> <TermTail>

<TermTail> ::= <MultOp> <Factor> <TermTail>
<TermTail> ::= EPSILON

<Type> ::= 'integer' @makenode~string@
<Type> ::= 'float' @makenode~string@
<Type> ::= 'string' @makenode~string@
<Type> ::= 'id' @makenode~string@

<VarDecl> ::= <Type> 'id' @makenode~string@ <ArraySizeRept> ';'

<VarDeclRep> ::= <VarDecl> <VarDeclRep>
<VarDeclRep> ::= EPSILON

<Variable> ::= 'id' @makenode~string@ <VariableIdnest>

<VariableIdnest> ::= <IndiceRep> <VariableIdnestTail>

<VariableIdnestTail> ::= '.' 'id' @makenode~string@ <VariableIdnest>
<VariableIdnestTail> ::= EPSILON

<Visibility> ::= 'public'
<Visibility> ::= 'private'
<Visibility> ::= EPSILON
